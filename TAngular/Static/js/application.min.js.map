{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","Static/js/ts/application.js","application.min.js","Static/js/ts/controllers/formController.js","Static/js/ts/controllers/treeController.js","Static/js/ts/services/carServices.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","Ta","FormControllers","TreeControllers","angular","moduleName","./controllers/formController","./controllers/treeController",2,"Services","Form","app","Controllers","EditFormController","$scope","$log","$rootScope","$carServices","_this","this","updateActiveVersion","activeVersion","getActiveVersion","controllerName","$inject","CarServices","serviceName","controller","../services/carServices",3,"Tree","ViewController","broadcastEvent","getVendors","vendors","debug","getModels","vendor","models","getModelsByVendor","getVersions","model","versions","getVersionsByModel","setVendor","active","setModel","setVersion","version","setActiveVersion","$broadcast",4,"$resource","query","method","isArray","v","m","factory"],"mappings":"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","file":"application.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/// <reference path=\"typings/angularjs/angular.d.ts\" />\r\n/// <reference path=\"typings/angularjs/angular-resource.d.ts\" />\r\nvar FormControllers = require(\"./controllers/formController\");\r\nvar TreeControllers = require(\"./controllers/treeController\");\r\nvar Ta;\r\n(function (Ta) {\r\n    \"use strict\";\r\n    var app = angular.module(\"ta\", [\r\n        \"ngResource\",\r\n        FormControllers.moduleName,\r\n        TreeControllers.moduleName\r\n    ]);\r\n})(Ta || (Ta = {}));\r\n//# sourceMappingURL=application.js.map","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/// <reference path=\"typings/angularjs/angular.d.ts\" />\r\n/// <reference path=\"typings/angularjs/angular-resource.d.ts\" />\r\nvar FormControllers = require(\"./controllers/formController\");\r\nvar TreeControllers = require(\"./controllers/treeController\");\r\nvar Ta;\r\n(function (Ta) {\r\n    \"use strict\";\r\n    var app = angular.module(\"ta\", [\r\n        \"ngResource\",\r\n        FormControllers.moduleName,\r\n        TreeControllers.moduleName\r\n    ]);\r\n})(Ta || (Ta = {}));\r\n\n},{\"./controllers/formController\":2,\"./controllers/treeController\":3}],2:[function(require,module,exports){\n/// <reference path=\"../typings/angularjs/angular.d.ts\" />\r\nvar Services = require(\"../services/carServices\");\r\nexports.moduleName = \"form.controllers\";\r\nvar app = angular.module(exports.moduleName, [Services.moduleName]);\r\nvar Form;\r\n(function (Form) {\r\n    var Controllers;\r\n    (function (Controllers) {\r\n        var EditFormController = (function () {\r\n            function EditFormController($scope, $log, $rootScope, $carServices) {\r\n                var _this = this;\r\n                this.$scope = $scope;\r\n                this.$log = $log;\r\n                this.$rootScope = $rootScope;\r\n                this.$carServices = $carServices;\r\n                this.updateActiveVersion = function () {\r\n                    _this.$scope.activeVersion = _this.$carServices.getActiveVersion();\r\n                };\r\n                $scope.activeVersion = null;\r\n            }\r\n            EditFormController.controllerName = \"form.editCtrl\";\r\n            EditFormController.$inject = [\"$scope\", \"$log\", \"$rootScope\", Services.CarServices.serviceName];\r\n            return EditFormController;\r\n        })();\r\n        app.controller(EditFormController.controllerName, EditFormController);\r\n    })(Controllers = Form.Controllers || (Form.Controllers = {}));\r\n})(Form || (Form = {}));\r\n\n},{\"../services/carServices\":4}],3:[function(require,module,exports){\n/// <reference path=\"../typings/angularjs/angular.d.ts\" />\r\nvar Services = require(\"../services/carServices\");\r\nexports.moduleName = \"tree.controllers\";\r\nvar app = angular.module(exports.moduleName, [Services.moduleName]);\r\nvar Tree;\r\n(function (Tree) {\r\n    var Controllers;\r\n    (function (Controllers) {\r\n        var ViewController = (function () {\r\n            function ViewController($scope, $log, $carServices, $rootScope) {\r\n                var _this = this;\r\n                this.$scope = $scope;\r\n                this.$log = $log;\r\n                this.$carServices = $carServices;\r\n                this.$rootScope = $rootScope;\r\n                this.broadcastEvent = \"updatedActiveCarVersion\";\r\n                this.getVendors = function () {\r\n                    var vendors = _this.$carServices.getVendors();\r\n                    _this.$log.debug(\"Fetched Vendors.\", vendors);\r\n                    return vendors;\r\n                };\r\n                this.getModels = function (vendor) {\r\n                    var models = _this.$carServices.getModelsByVendor(vendor);\r\n                    _this.$log.debug(\"Fetched Models.\", models);\r\n                    return models;\r\n                };\r\n                this.getVersions = function (model) {\r\n                    var versions = _this.$carServices.getVersionsByModel(model);\r\n                    _this.$log.debug(\"Fetched Versions.\", versions);\r\n                    return versions;\r\n                };\r\n                this.setVendor = function (vendor) {\r\n                    vendor.active = !vendor.active;\r\n                    if (vendor.models.length > 0) {\r\n                        return;\r\n                    }\r\n                    vendor.models = _this.getModels(vendor) || [];\r\n                };\r\n                this.setModel = function (model) {\r\n                    model.active = !model.active;\r\n                    if (model.versions.length > 0) {\r\n                        return;\r\n                    }\r\n                    model.versions = _this.getVersions(model) || [];\r\n                };\r\n                this.setVersion = function (version) {\r\n                    version.active = !version.active;\r\n                    _this.$scope.activeVersion = version;\r\n                    _this.$carServices.setActiveVersion(version);\r\n                    _this.$rootScope.$broadcast(_this.broadcastEvent);\r\n                };\r\n                $scope.vendors = this.getVendors() || [];\r\n                $scope.activeVersion = null;\r\n                $scope.setVendor = this.setVendor;\r\n                $scope.setModel = this.setModel;\r\n                $scope.setVersion = this.setVersion;\r\n            }\r\n            ViewController.controllerName = \"tree.viewController\";\r\n            ViewController.$inject = [\"$scope\", \"$log\", \"services.carServices\", \"$rootScope\"];\r\n            return ViewController;\r\n        })();\r\n        app.controller(ViewController.controllerName, ViewController);\r\n    })(Controllers = Tree.Controllers || (Tree.Controllers = {}));\r\n})(Tree || (Tree = {}));\r\n\n},{\"../services/carServices\":4}],4:[function(require,module,exports){\n/// <reference path=\"../typings/angularjs/angular.d.ts\" />\r\n/// <reference path=\"../typings/angularjs/angular-route.d.ts\" />\r\nexports.moduleName = \"car.services\";\r\nvar app = angular.module(exports.moduleName, []);\r\nvar CarServices = (function () {\r\n    function CarServices($resource) {\r\n        var _this = this;\r\n        this.$resource = $resource;\r\n        this.getVendors = function () {\r\n            return _this.$resource(\"/api/cars/\", {})\r\n                .query({}, {\r\n                method: \"Get\",\r\n                isArray: true\r\n            });\r\n        };\r\n        this.getModels = function () {\r\n            return _this.$resource(\"/api/cars/\", {})\r\n                .query({}, {\r\n                method: \"Get\",\r\n                isArray: true\r\n            });\r\n        };\r\n        this.getModelsByVendor = function (v) {\r\n            return _this.$resource(\"/api/cars/:vendor\", { vendor: '@vendor' })\r\n                .query({ vendor: v.vendor }, {\r\n                method: \"Get\",\r\n                isArray: true\r\n            });\r\n        };\r\n        this.getVersions = function () {\r\n            return _this.$resource(\"/api/cars/\", {})\r\n                .query({}, {\r\n                method: \"Get\",\r\n                isArray: true\r\n            });\r\n        };\r\n        this.getVersionsByModel = function (m) {\r\n            return _this.$resource(\"/api/cars/:vendor/:model/\", { vendor: '@vendor', model: '@model' })\r\n                .query({ vendor: m.vendor, model: m.model }, {\r\n                method: \"Get\",\r\n                isArray: true\r\n            });\r\n        };\r\n        this.getActiveVersion = function () {\r\n            return _this.activeVersion;\r\n        };\r\n        this.setActiveVersion = function (v) {\r\n            _this.activeVersion = v;\r\n        };\r\n    }\r\n    CarServices.serviceName = \"carServices\";\r\n    CarServices.$inject = [\"$resource\"];\r\n    return CarServices;\r\n})();\r\nexports.CarServices = CarServices;\r\napp.factory(CarServices.serviceName, [\"$resource\", function ($resource) { return new CarServices($resource); }]);\r\n\n},{}]},{},[1])\n\n","/// <reference path=\"../typings/angularjs/angular.d.ts\" />\r\nvar Services = require(\"../services/carServices\");\r\nexports.moduleName = \"form.controllers\";\r\nvar app = angular.module(exports.moduleName, [Services.moduleName]);\r\nvar Form;\r\n(function (Form) {\r\n    var Controllers;\r\n    (function (Controllers) {\r\n        var EditFormController = (function () {\r\n            function EditFormController($scope, $log, $rootScope, $carServices) {\r\n                var _this = this;\r\n                this.$scope = $scope;\r\n                this.$log = $log;\r\n                this.$rootScope = $rootScope;\r\n                this.$carServices = $carServices;\r\n                this.updateActiveVersion = function () {\r\n                    _this.$scope.activeVersion = _this.$carServices.getActiveVersion();\r\n                };\r\n                $scope.activeVersion = null;\r\n            }\r\n            EditFormController.controllerName = \"form.editCtrl\";\r\n            EditFormController.$inject = [\"$scope\", \"$log\", \"$rootScope\", Services.CarServices.serviceName];\r\n            return EditFormController;\r\n        })();\r\n        app.controller(EditFormController.controllerName, EditFormController);\r\n    })(Controllers = Form.Controllers || (Form.Controllers = {}));\r\n})(Form || (Form = {}));\r\n//# sourceMappingURL=formController.js.map","/// <reference path=\"../typings/angularjs/angular.d.ts\" />\r\nvar Services = require(\"../services/carServices\");\r\nexports.moduleName = \"tree.controllers\";\r\nvar app = angular.module(exports.moduleName, [Services.moduleName]);\r\nvar Tree;\r\n(function (Tree) {\r\n    var Controllers;\r\n    (function (Controllers) {\r\n        var ViewController = (function () {\r\n            function ViewController($scope, $log, $carServices, $rootScope) {\r\n                var _this = this;\r\n                this.$scope = $scope;\r\n                this.$log = $log;\r\n                this.$carServices = $carServices;\r\n                this.$rootScope = $rootScope;\r\n                this.broadcastEvent = \"updatedActiveCarVersion\";\r\n                this.getVendors = function () {\r\n                    var vendors = _this.$carServices.getVendors();\r\n                    _this.$log.debug(\"Fetched Vendors.\", vendors);\r\n                    return vendors;\r\n                };\r\n                this.getModels = function (vendor) {\r\n                    var models = _this.$carServices.getModelsByVendor(vendor);\r\n                    _this.$log.debug(\"Fetched Models.\", models);\r\n                    return models;\r\n                };\r\n                this.getVersions = function (model) {\r\n                    var versions = _this.$carServices.getVersionsByModel(model);\r\n                    _this.$log.debug(\"Fetched Versions.\", versions);\r\n                    return versions;\r\n                };\r\n                this.setVendor = function (vendor) {\r\n                    vendor.active = !vendor.active;\r\n                    if (vendor.models.length > 0) {\r\n                        return;\r\n                    }\r\n                    vendor.models = _this.getModels(vendor) || [];\r\n                };\r\n                this.setModel = function (model) {\r\n                    model.active = !model.active;\r\n                    if (model.versions.length > 0) {\r\n                        return;\r\n                    }\r\n                    model.versions = _this.getVersions(model) || [];\r\n                };\r\n                this.setVersion = function (version) {\r\n                    version.active = !version.active;\r\n                    _this.$scope.activeVersion = version;\r\n                    _this.$carServices.setActiveVersion(version);\r\n                    _this.$rootScope.$broadcast(_this.broadcastEvent);\r\n                };\r\n                $scope.vendors = this.getVendors() || [];\r\n                $scope.activeVersion = null;\r\n                $scope.setVendor = this.setVendor;\r\n                $scope.setModel = this.setModel;\r\n                $scope.setVersion = this.setVersion;\r\n            }\r\n            ViewController.controllerName = \"tree.viewController\";\r\n            ViewController.$inject = [\"$scope\", \"$log\", \"services.carServices\", \"$rootScope\"];\r\n            return ViewController;\r\n        })();\r\n        app.controller(ViewController.controllerName, ViewController);\r\n    })(Controllers = Tree.Controllers || (Tree.Controllers = {}));\r\n})(Tree || (Tree = {}));\r\n//# sourceMappingURL=treeController.js.map","/// <reference path=\"../typings/angularjs/angular.d.ts\" />\r\n/// <reference path=\"../typings/angularjs/angular-route.d.ts\" />\r\nexports.moduleName = \"car.services\";\r\nvar app = angular.module(exports.moduleName, []);\r\nvar CarServices = (function () {\r\n    function CarServices($resource) {\r\n        var _this = this;\r\n        this.$resource = $resource;\r\n        this.getVendors = function () {\r\n            return _this.$resource(\"/api/cars/\", {})\r\n                .query({}, {\r\n                method: \"Get\",\r\n                isArray: true\r\n            });\r\n        };\r\n        this.getModels = function () {\r\n            return _this.$resource(\"/api/cars/\", {})\r\n                .query({}, {\r\n                method: \"Get\",\r\n                isArray: true\r\n            });\r\n        };\r\n        this.getModelsByVendor = function (v) {\r\n            return _this.$resource(\"/api/cars/:vendor\", { vendor: '@vendor' })\r\n                .query({ vendor: v.vendor }, {\r\n                method: \"Get\",\r\n                isArray: true\r\n            });\r\n        };\r\n        this.getVersions = function () {\r\n            return _this.$resource(\"/api/cars/\", {})\r\n                .query({}, {\r\n                method: \"Get\",\r\n                isArray: true\r\n            });\r\n        };\r\n        this.getVersionsByModel = function (m) {\r\n            return _this.$resource(\"/api/cars/:vendor/:model/\", { vendor: '@vendor', model: '@model' })\r\n                .query({ vendor: m.vendor, model: m.model }, {\r\n                method: \"Get\",\r\n                isArray: true\r\n            });\r\n        };\r\n        this.getActiveVersion = function () {\r\n            return _this.activeVersion;\r\n        };\r\n        this.setActiveVersion = function (v) {\r\n            _this.activeVersion = v;\r\n        };\r\n    }\r\n    CarServices.serviceName = \"carServices\";\r\n    CarServices.$inject = [\"$resource\"];\r\n    return CarServices;\r\n})();\r\nexports.CarServices = CarServices;\r\napp.factory(CarServices.serviceName, [\"$resource\", function ($resource) { return new CarServices($resource); }]);\r\n//# sourceMappingURL=carServices.js.map"],"sourceRoot":"/source/"}